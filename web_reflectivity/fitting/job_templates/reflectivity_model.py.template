import os
import sys
import time
import subprocess

def submit():
    output_dir = "${OUTPUT_DIR}"
    ascii_data = """${ASCII_DATA}"""
    data_file = "${REDUCED_FILE}"
    data_dir = os.path.split(data_file)[0]
    if not os.path.isdir(output_dir):
        os.makedirs(output_dir)
    with open(data_file, 'w') as fd:
        fd.write(ascii_data)

    model_file = """
import numpy
import os
from refl1d.names import *
from math import *
import warnings
import matplotlib.cbook
warnings.filterwarnings("ignore",category=matplotlib.cbook.mplDeprecation)
warnings.simplefilter('ignore', UserWarning)

# Maximum Q-value ##############################################################
q_min = ${Q_MIN}
q_max = ${Q_MAX}

reduced_file = "${REDUCED_FILE}"

Q, R, dR, dQ = numpy.loadtxt(reduced_file).T
i_min = min([i for i in range(len(Q)) if Q[i]>q_min])
i_max = max([i for i in range(len(Q)) if Q[i]<q_max])+1

# SNS data is FWHM
dQ_std = dQ/2.35
${PROBE_NAME} = QProbe(Q[i_min:i_max], dQ_std[i_min:i_max], data=(R[i_min:i_max], dR[i_min:i_max]))

# Materials ####################################################################
${MATERIALS}

# Film definition ##############################################################
${SAMPLE}

${RANGES}

${SAMPLE_RANGES}
################################################################################

${EXPT_NAME} = Experiment(probe=${PROBE_NAME}, sample=${SAMPLE_NAME})
problem = FitProblem(${EXPT_NAME})
"""
    model_path = os.path.join(data_dir, '__model.py')
    with open(model_path, 'w') as fd:
        fd.write(model_file)

    cmd = "rm -f %s/*; PATH='${REFL1D_PATH}:$$PATH'; refl1d_cli.py --fit=${ENGINE} --steps=${REFL1D_STEPS} --burn=${REFL1D_BURN} --store=%s %s --batch" % (output_dir, output_dir, model_path)
    output_log = os.path.join(data_dir, 'fit.log')
    fd = open(output_log, 'w')
    fd.write("Starting fit: %s\n" % time.ctime())
    output_code = subprocess.call(cmd, stdout=fd, stderr=fd, shell=True)
    fd.write("Fit complete: %s\n" % time.ctime())

    print('REFL1D_VERSION ${REFL1D_VERSION}')
    try:
        with open(os.path.join(output_dir, '__model.err'), 'r') as out_params:
            print("MODEL_PARAMS_START")
            for line in out_params.readlines():
                if not line.strip().startswith('.'):
                    print(line.replace('\n',''))
            print("MODEL_PARAMS_END")
    except:
        fd.write("Error: could not process fit results\n")
        print(sys.exc_value)

    try:
        with open(os.path.join(output_dir, '__model-expt.json'), 'r') as out_params:
            model_params = out_params.read()
            fd.write(model_params)
            print("MODEL_JSON_START")
            print(model_params)
            print("MODEL_JSON_END")
    except:
        fd.write("Error: could not process fit results\n")
        print(sys.exc_value)

    fd.close()

if __name__ == '__main__':
    t_0 = time.time()
    submit()
    delta_time = time.time() - t_0
    print("Done: %g sec" % delta_time)
